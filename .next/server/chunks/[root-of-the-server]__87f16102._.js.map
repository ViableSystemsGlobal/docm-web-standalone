{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/lib/supabase.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\n\n// Server-side Supabase client for API routes\nexport const createServerSupabaseClient = () => {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  \n  if (!url || !key) {\n    throw new Error('Supabase environment variables not configured')\n  }\n  \n  return createServerClient(\n    url,\n    key,\n  {\n    cookies: {\n        get() {\n          return null\n      },\n        set() {\n          // No-op for API routes\n      },\n        remove() {\n          // No-op for API routes\n      },\n    },\n  }\n)\n}\n\n// Types for the website (focusing on public-facing data)\nexport type Contact = {\n  id: string\n  first_name: string | null\n  last_name: string | null\n  phone: string | null\n  email: string | null\n  profile_image: string | null\n  lifecycle: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Event = {\n  id: string\n  name: string\n  description: string | null\n  location: string | null\n  capacity: number | null\n  event_date: string\n  is_recurring: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport type EventImage = {\n  id: string\n  event_id: string\n  url: string\n  alt_text: string | null\n  sort_order: number\n  created_at: string\n}\n\nexport type EventRegistration = {\n  id: string\n  event_id: string\n  contact_id: string\n  status: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      'contacts': {\n        Row: Contact\n        Insert: Omit<Contact, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Contact, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  },\n  events: {\n    Tables: {\n      'events': {\n        Row: Event\n        Insert: Omit<Event, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Event, 'id' | 'created_at' | 'updated_at'>>\n      },\n      'event_images': {\n        Row: EventImage\n        Insert: Omit<EventImage, 'id' | 'created_at'>\n        Update: Partial<Omit<EventImage, 'id' | 'created_at'>>\n      },\n      'registrations': {\n        Row: EventRegistration\n        Insert: Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  }\n} "],"names":[],"mappings":";;;AAAA;AAAA;;AAGO,MAAM,6BAA6B;IACxC,MAAM;IACN,MAAM;IAEN,uCAAkB;;IAElB;IAEA,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,EACtB,KACA,KACF;QACE,SAAS;YACL;gBACE,OAAO;YACX;YACE;YACE,uBAAuB;YAC3B;YACE;YACE,uBAAuB;YAC3B;QACF;IACF;AAEF","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/app/api/events/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createServerSupabaseClient } from '@/lib/supabase'\n\n// Default/fallback events data\nconst defaultEvents = [\n  {\n    id: 'default-1',\n    name: \"Sunday Worship Experience\",\n    event_date: \"2024-01-28T09:00:00\",\n    location: \"Main Sanctuary\",\n    description: \"Join us for an inspiring worship experience with contemporary music and biblical teaching.\",\n    capacity: 200,\n    primary_image: null,\n    gradient: \"from-blue-800 to-indigo-900\",\n    type: \"worship\"\n  },\n  {\n    id: 'default-2',\n    name: \"Midweek Connection\",\n    event_date: \"2024-01-31T19:00:00\",\n    location: \"Fellowship Hall\",\n    description: \"Dive deeper into God's word through interactive Bible study and fellowship.\",\n    capacity: 50,\n    primary_image: null,\n    gradient: \"from-purple-800 to-pink-900\",\n    type: \"study\"\n  },\n  {\n    id: 'default-3',\n    name: \"Youth Ignite Night\",\n    event_date: \"2024-02-02T19:00:00\",\n    location: \"Youth Center\",\n    description: \"High-energy youth service with games, worship, and relevant messages for teens.\",\n    capacity: 100,\n    primary_image: null,\n    gradient: \"from-green-800 to-teal-900\",\n    type: \"youth\"\n  },\n  {\n    id: 'default-4',\n    name: \"Community Outreach\",\n    event_date: \"2024-02-05T10:00:00\",\n    location: \"Community Center\",\n    description: \"Join us as we serve our community with love and compassion through various outreach programs.\",\n    capacity: 150,\n    primary_image: null,\n    gradient: \"from-orange-800 to-red-900\",\n    type: \"outreach\"\n  }\n]\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Environment check - SAME pattern as homepage/navigation\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n      console.log('🔄 EVENTS SOURCE: DEFAULT (Supabase not configured)')\n      return NextResponse.json({ \n        events: defaultEvents,\n        source: 'default',\n        message: 'Using default events - Supabase not configured'\n      })\n    }\n\n    let supabase\n    try {\n      supabase = createServerSupabaseClient()\n    } catch (error) {\n      console.log('🔄 EVENTS SOURCE: DEFAULT (Supabase client creation failed)')\n      return NextResponse.json({ \n        events: defaultEvents,\n        source: 'default',\n        message: 'Using default events - Supabase client failed'\n      })\n    }\n\n    console.log('🔍 Attempting to fetch events from database...')\n    \n    // Get upcoming events (event_date >= today)\n    const today = new Date().toISOString()\n    \n    // First, fetch events\n    const { data: events, error: eventsError } = await supabase\n      .from('events')\n      .select('*')\n      .gte('event_date', today)\n      .order('event_date', { ascending: true })\n      .limit(10) // Get max 10 upcoming events\n\n    console.log('📊 Database query result:', {\n      events: events,\n      error: eventsError,\n      eventsLength: events ? events.length : 0\n    })\n\n    if (eventsError) {\n      console.error('🔄 EVENTS SOURCE: DEFAULT (Database error):', eventsError.message)\n      return NextResponse.json({ \n        events: defaultEvents,\n        source: 'default',\n        message: `Using default events - Database error: ${eventsError.message}`\n      })\n    }\n\n    if (!events || events.length === 0) {\n      console.log('🔄 EVENTS SOURCE: DEFAULT (No upcoming events found)')\n      return NextResponse.json({ \n        events: defaultEvents,\n        source: 'default',\n        message: 'Using default events - No upcoming events found'\n      })\n    }\n\n    // Fetch images for these events\n    const eventIds = events.map(event => event.id)\n    const { data: images } = await supabase\n      .from('event_images')\n      .select('*')\n      .in('event_id', eventIds)\n      .order('sort_order', { ascending: true })\n\n    // Create image map\n    const imageMap = new Map()\n    if (images && images.length > 0) {\n      const imagesByEvent = images.reduce((acc: any, img) => {\n        if (!acc[img.event_id]) {\n          acc[img.event_id] = []\n        }\n        acc[img.event_id].push(img)\n        return acc\n      }, {})\n      \n      Object.keys(imagesByEvent).forEach(eventId => {\n        imageMap.set(eventId, imagesByEvent[eventId][0]) // First image as primary\n      })\n    }\n\n    // Transform events to frontend format\n    const transformedEvents = events.map(event => ({\n      id: event.id,\n      name: event.name,\n      event_date: event.event_date,\n      location: event.location || 'Location TBD',\n      description: event.description || 'Join us for this special event.',\n      capacity: event.capacity,\n      primary_image: imageMap.get(event.id) || null,\n      // Add some variety in gradients and types\n      gradient: getEventGradient(event.name, event.id),\n      type: getEventType(event.name, event.description)\n    }))\n    \n    console.log('✅ EVENTS SOURCE: DATABASE (Successfully loaded from CMS)')\n    return NextResponse.json({ \n      events: transformedEvents,\n      source: 'database',\n      message: `Loaded ${transformedEvents.length} upcoming events from database`\n    })\n\n  } catch (error) {\n    console.error('🔄 EVENTS SOURCE: DEFAULT (Unexpected error):', error)\n    return NextResponse.json({ \n      events: defaultEvents,\n      source: 'default',\n      message: 'Using default events - Unexpected error'\n    })\n  }\n}\n\n// Helper function to assign gradients based on event characteristics\nfunction getEventGradient(name: string, id: string): string {\n  const gradients = [\n    \"from-blue-800 to-indigo-900\",\n    \"from-purple-800 to-pink-900\", \n    \"from-green-800 to-teal-900\",\n    \"from-orange-800 to-red-900\",\n    \"from-teal-800 to-cyan-900\",\n    \"from-rose-800 to-pink-900\"\n  ]\n  \n  // Use a simple hash of the id to ensure consistent colors\n  const hash = id.split('').reduce((a, b) => a + b.charCodeAt(0), 0)\n  return gradients[hash % gradients.length]\n}\n\n// Helper function to categorize events\nfunction getEventType(name: string, description: string | null): string {\n  const content = (name + ' ' + (description || '')).toLowerCase()\n  \n  if (content.includes('worship') || content.includes('service') || content.includes('sunday')) return 'worship'\n  if (content.includes('youth') || content.includes('teen') || content.includes('young')) return 'youth'\n  if (content.includes('study') || content.includes('bible') || content.includes('prayer')) return 'study'\n  if (content.includes('outreach') || content.includes('community') || content.includes('serve')) return 'outreach'\n  if (content.includes('conference') || content.includes('seminar') || content.includes('retreat')) return 'conference'\n  \n  return 'event' // default\n} "],"names":[],"mappings":"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","debugId":null}}]
}