{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/lib/supabase.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\n\n// Server-side Supabase client for API routes\nexport const createServerSupabaseClient = () => {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  \n  if (!url || !key) {\n    throw new Error('Supabase environment variables not configured')\n  }\n  \n  return createServerClient(\n    url,\n    key,\n  {\n    cookies: {\n        get() {\n          return null\n      },\n        set() {\n          // No-op for API routes\n      },\n        remove() {\n          // No-op for API routes\n      },\n    },\n  }\n)\n}\n\n// Types for the website (focusing on public-facing data)\nexport type Contact = {\n  id: string\n  first_name: string | null\n  last_name: string | null\n  phone: string | null\n  email: string | null\n  profile_image: string | null\n  lifecycle: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Event = {\n  id: string\n  name: string\n  description: string | null\n  location: string | null\n  capacity: number | null\n  event_date: string\n  is_recurring: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport type EventImage = {\n  id: string\n  event_id: string\n  url: string\n  alt_text: string | null\n  sort_order: number\n  created_at: string\n}\n\nexport type EventRegistration = {\n  id: string\n  event_id: string\n  contact_id: string\n  status: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      'contacts': {\n        Row: Contact\n        Insert: Omit<Contact, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Contact, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  },\n  events: {\n    Tables: {\n      'events': {\n        Row: Event\n        Insert: Omit<Event, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Event, 'id' | 'created_at' | 'updated_at'>>\n      },\n      'event_images': {\n        Row: EventImage\n        Insert: Omit<EventImage, 'id' | 'created_at'>\n        Update: Partial<Omit<EventImage, 'id' | 'created_at'>>\n      },\n      'registrations': {\n        Row: EventRegistration\n        Insert: Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  }\n} "],"names":[],"mappings":";;;AAAA;AAAA;;AAGO,MAAM,6BAA6B;IACxC,MAAM;IACN,MAAM;IAEN,uCAAkB;;IAElB;IAEA,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,EACtB,KACA,KACF;QACE,SAAS;YACL;gBACE,OAAO;YACX;YACE;YACE,uBAAuB;YAC3B;YACE;YACE,uBAAuB;YAC3B;QACF;IACF;AAEF","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/app/api/sermons/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createServerSupabaseClient } from '@/lib/supabase'\n\n// Sermon interface for web app\ninterface Sermon {\n  id: string\n  title: string\n  slug: string\n  description: string\n  speaker: string\n  series?: string\n  scripture_reference?: string\n  sermon_date: string\n  duration?: number\n  video_type: 'upload' | 'youtube'\n  video_url?: string\n  youtube_url?: string\n  youtube_id?: string\n  audio_url?: string\n  thumbnail_image?: string\n  tags: string[]\n  status: string\n  view_count: number\n}\n\n// Default sermons fallback data\nconst defaultSermons: Sermon[] = [\n  {\n    id: 'default-1',\n    title: 'Finding Your Purpose in God\\'s Plan',\n    slug: 'finding-purpose-gods-plan',\n    description: 'Discover how God has a unique plan and purpose for your life, and learn practical steps to align your goals with His will.',\n    speaker: 'Pastor Michael Johnson',\n    series: 'Life Purpose',\n    scripture_reference: 'Jeremiah 29:11',\n    sermon_date: '2024-01-21',\n    duration: 45,\n    video_type: 'youtube',\n    youtube_url: 'https://youtube.com/watch?v=dQw4w9WgXcQ',\n    youtube_id: 'dQw4w9WgXcQ',\n    thumbnail_image: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop',\n    tags: ['purpose', 'calling', 'faith'],\n    status: 'published',\n    view_count: 245\n  },\n  {\n    id: 'default-2',\n    title: 'Walking in Faith',\n    slug: 'walking-in-faith',\n    description: 'Building unshakeable faith in uncertain times through trust in God\\'s promises.',\n    speaker: 'Pastor Sarah Johnson',\n    series: 'Faith Foundations',\n    scripture_reference: 'Hebrews 11:1',\n    sermon_date: '2024-01-14',\n    duration: 38,\n    video_type: 'youtube',\n    youtube_url: 'https://youtube.com/watch?v=dQw4w9WgXcQ',\n    youtube_id: 'dQw4w9WgXcQ',\n    thumbnail_image: 'https://images.unsplash.com/photo-1544027993-37dbfe43562a?w=800&h=600&fit=crop',\n    tags: ['faith', 'trust', 'hope'],\n    status: 'published',\n    view_count: 189\n  },\n  {\n    id: 'default-3',\n    title: 'Love in Action',\n    slug: 'love-in-action',\n    description: 'Demonstrating Christ\\'s love through practical service and compassion.',\n    speaker: 'Pastor Michael Chen',\n    series: 'Living Love',\n    scripture_reference: '1 John 3:18',\n    sermon_date: '2024-01-07',\n    duration: 42,\n    video_type: 'youtube',\n    youtube_url: 'https://youtube.com/watch?v=dQw4w9WgXcQ',\n    youtube_id: 'dQw4w9WgXcQ',\n    thumbnail_image: 'https://images.unsplash.com/photo-1469571486292-0ba58a3f068b?w=800&h=600&fit=crop',\n    tags: ['love', 'service', 'compassion'],\n    status: 'published',\n    view_count: 156\n  }\n]\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Get query parameters\n    const { searchParams } = new URL(request.url)\n    const limit = parseInt(searchParams.get('limit') || '3')\n    const featured = searchParams.get('featured') === 'true'\n    \n    // Environment check\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n      console.log('üîÑ SERMONS SOURCE: DEFAULT (Supabase not configured)')\n      return NextResponse.json({ \n        sermons: defaultSermons.slice(0, limit),\n        source: 'default',\n        message: 'Using default sermons - Supabase not configured'\n      })\n    }\n\n    let supabase\n    try {\n      supabase = createServerSupabaseClient()\n    } catch (error) {\n      console.log('üîÑ SERMONS SOURCE: DEFAULT (Supabase client creation failed)')\n      return NextResponse.json({ \n        sermons: defaultSermons.slice(0, limit),\n        source: 'default',\n        message: 'Using default sermons - Supabase client failed'\n      })\n    }\n\n    console.log('üîç Attempting to fetch sermons from database...')\n    \n    // Fetch sermons from database\n    let query = supabase\n      .from('sermons')\n      .select('*')\n      .eq('status', 'published')\n      .order('sermon_date', { ascending: false })\n      .limit(limit)\n\n    const { data: sermons, error } = await query\n\n    console.log('üìä Database query result:', {\n      sermons: sermons,\n      error: error,\n      sermonsLength: sermons ? sermons.length : 0\n    })\n\n    if (error) {\n      console.error('üîÑ SERMONS SOURCE: DEFAULT (Database error):', error.message)\n      return NextResponse.json({ \n        sermons: defaultSermons.slice(0, limit),\n        source: 'default',\n        message: `Using default sermons - Database error: ${error.message}`\n      })\n    }\n\n    if (!sermons || sermons.length === 0) {\n      console.log('üîÑ SERMONS SOURCE: DEFAULT (No sermons found)')\n      return NextResponse.json({ \n        sermons: defaultSermons.slice(0, limit),\n        source: 'default',\n        message: 'Using default sermons - No sermons found in database'\n      })\n    }\n\n    console.log('‚úÖ SERMONS SOURCE: DATABASE (Successfully loaded from CMS)')\n    return NextResponse.json({ \n      sermons: sermons,\n      source: 'database',\n      message: `Loaded ${sermons.length} sermons from database`\n    })\n\n  } catch (error) {\n    console.error('üîÑ SERMONS SOURCE: DEFAULT (Unexpected error):', error)\n    return NextResponse.json({ \n      sermons: defaultSermons.slice(0, 3),\n      source: 'default',\n      message: 'Using default sermons - Unexpected error'\n    })\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;;;AAwBA,gCAAgC;AAChC,MAAM,iBAA2B;IAC/B;QACE,IAAI;QACJ,OAAO;QACP,MAAM;QACN,aAAa;QACb,SAAS;QACT,QAAQ;QACR,qBAAqB;QACrB,aAAa;QACb,UAAU;QACV,YAAY;QACZ,aAAa;QACb,YAAY;QACZ,iBAAiB;QACjB,MAAM;YAAC;YAAW;YAAW;SAAQ;QACrC,QAAQ;QACR,YAAY;IACd;IACA;QACE,IAAI;QACJ,OAAO;QACP,MAAM;QACN,aAAa;QACb,SAAS;QACT,QAAQ;QACR,qBAAqB;QACrB,aAAa;QACb,UAAU;QACV,YAAY;QACZ,aAAa;QACb,YAAY;QACZ,iBAAiB;QACjB,MAAM;YAAC;YAAS;YAAS;SAAO;QAChC,QAAQ;QACR,YAAY;IACd;IACA;QACE,IAAI;QACJ,OAAO;QACP,MAAM;QACN,aAAa;QACb,SAAS;QACT,QAAQ;QACR,qBAAqB;QACrB,aAAa;QACb,UAAU;QACV,YAAY;QACZ,aAAa;QACb,YAAY;QACZ,iBAAiB;QACjB,MAAM;YAAC;YAAQ;YAAW;SAAa;QACvC,QAAQ;QACR,YAAY;IACd;CACD;AAEM,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,uBAAuB;QACvB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY;QACpD,MAAM,WAAW,aAAa,GAAG,CAAC,gBAAgB;QAElD,oBAAoB;QACpB,uCAAyF;;QAOzF;QAEA,IAAI;QACJ,IAAI;YACF,WAAW,CAAA,GAAA,wHAAA,CAAA,6BAA0B,AAAD;QACtC,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,eAAe,KAAK,CAAC,GAAG;gBACjC,QAAQ;gBACR,SAAS;YACX;QACF;QAEA,QAAQ,GAAG,CAAC;QAEZ,8BAA8B;QAC9B,IAAI,QAAQ,SACT,IAAI,CAAC,WACL,MAAM,CAAC,KACP,EAAE,CAAC,UAAU,aACb,KAAK,CAAC,eAAe;YAAE,WAAW;QAAM,GACxC,KAAK,CAAC;QAET,MAAM,EAAE,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,MAAM;QAEvC,QAAQ,GAAG,CAAC,6BAA6B;YACvC,SAAS;YACT,OAAO;YACP,eAAe,UAAU,QAAQ,MAAM,GAAG;QAC5C;QAEA,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,gDAAgD,MAAM,OAAO;YAC3E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,eAAe,KAAK,CAAC,GAAG;gBACjC,QAAQ;gBACR,SAAS,CAAC,wCAAwC,EAAE,MAAM,OAAO,EAAE;YACrE;QACF;QAEA,IAAI,CAAC,WAAW,QAAQ,MAAM,KAAK,GAAG;YACpC,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS,eAAe,KAAK,CAAC,GAAG;gBACjC,QAAQ;gBACR,SAAS;YACX;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,QAAQ;YACR,SAAS,CAAC,OAAO,EAAE,QAAQ,MAAM,CAAC,sBAAsB,CAAC;QAC3D;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kDAAkD;QAChE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS,eAAe,KAAK,CAAC,GAAG;YACjC,QAAQ;YACR,SAAS;QACX;IACF;AACF","debugId":null}}]
}