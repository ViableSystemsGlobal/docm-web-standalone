{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/app/api/tenant-settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@supabase/supabase-js';\n\nexport async function GET(request: NextRequest) {\n  try {\n    // For tenant settings, we need to bypass RLS since this is public church information\n    // Try to use service role key if available, otherwise use anon key with RLS disabled query\n    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;\n    const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY;\n    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n    \n    if (!supabaseUrl || !supabaseAnonKey) {\n      return NextResponse.json({ \n        error: 'Database configuration missing',\n        success: false \n      }, { status: 500 });\n    }\n\n    let supabase;\n    \n    // Try service role first for bypassing RLS\n    if (supabaseServiceKey) {\n      supabase = createClient(supabaseUrl, supabaseServiceKey, {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      });\n    } else {\n      // Fallback to anon key\n      supabase = createClient(supabaseUrl, supabaseAnonKey);\n    }\n    \n    // Try to get existing tenant settings\n    const { data: settings, error } = await supabase\n      .from('tenant_settings')\n      .select('*')\n      .limit(1);\n    \n    if (error) {\n      console.error('Error fetching tenant settings:', error);\n      \n      // If it's an RLS policy violation, return default settings\n      if (error.message.includes('row-level security') || error.code === '42501') {\n        console.log('RLS policy violation, returning default settings');\n        const defaultSettings = {\n          id: 'default',\n          name: 'DOCM Church',\n          time_zone: 'America/New_York',\n          primary_color: '#1A202C',\n          secondary_color: '#F6E05E',\n          description: 'Demonstration of Christ Ministries',\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        \n        return NextResponse.json({ \n          success: true, \n          data: defaultSettings,\n          message: 'Using default tenant settings - database not accessible',\n          source: 'default'\n        });\n      }\n      \n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n    \n    // If no settings exist, return default ones (don't try to create via API)\n    if (!settings || settings.length === 0) {\n      const defaultSettings = {\n        id: 'default',\n        name: 'DOCM Church',\n        time_zone: 'America/New_York',\n        primary_color: '#1A202C',\n        secondary_color: '#F6E05E',\n        description: 'Demonstration of Christ Ministries',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n      \n      return NextResponse.json({ \n        success: true, \n        data: defaultSettings,\n        message: 'No tenant settings found, using defaults',\n        source: 'default'\n      });\n    }\n    \n    return NextResponse.json({ \n      success: true, \n      data: settings[0],\n      message: 'Tenant settings found',\n      source: 'database'\n    });\n    \n  } catch (error) {\n    console.error('Unexpected error in tenant-settings API:', error);\n    \n    // Return default settings on any error\n    const defaultSettings = {\n      id: 'default',\n      name: 'DOCM Church',\n      time_zone: 'America/New_York',\n      primary_color: '#1A202C',\n      secondary_color: '#F6E05E',\n      description: 'Demonstration of Christ Ministries',\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    \n    return NextResponse.json({ \n      success: true, \n      data: defaultSettings,\n      message: 'Error occurred, using default settings',\n      source: 'default',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  return NextResponse.json({ \n    error: 'Tenant settings creation not allowed from web frontend. Use admin panel.' \n  }, { status: 403 });\n} "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,qFAAqF;QACrF,2FAA2F;QAC3F,MAAM;QACN,MAAM,qBAAqB,QAAQ,GAAG,CAAC,yBAAyB;QAChE,MAAM;QAEN,uCAAsC;;QAKtC;QAEA,IAAI;QAEJ,2CAA2C;QAC3C,wCAAwB;YACtB,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,oBAAoB;gBACvD,MAAM;oBACJ,kBAAkB;oBAClB,gBAAgB;gBAClB;YACF;QACF,OAAO;;QAGP;QAEA,sCAAsC;QACtC,MAAM,EAAE,MAAM,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,SACrC,IAAI,CAAC,mBACL,MAAM,CAAC,KACP,KAAK,CAAC;QAET,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,mCAAmC;YAEjD,2DAA2D;YAC3D,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB,MAAM,IAAI,KAAK,SAAS;gBAC1E,QAAQ,GAAG,CAAC;gBACZ,MAAM,kBAAkB;oBACtB,IAAI;oBACJ,MAAM;oBACN,WAAW;oBACX,eAAe;oBACf,iBAAiB;oBACjB,aAAa;oBACb,YAAY,IAAI,OAAO,WAAW;oBAClC,YAAY,IAAI,OAAO,WAAW;gBACpC;gBAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBACvB,SAAS;oBACT,MAAM;oBACN,SAAS;oBACT,QAAQ;gBACV;YACF;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,0EAA0E;QAC1E,IAAI,CAAC,YAAY,SAAS,MAAM,KAAK,GAAG;YACtC,MAAM,kBAAkB;gBACtB,IAAI;gBACJ,MAAM;gBACN,WAAW;gBACX,eAAe;gBACf,iBAAiB;gBACjB,aAAa;gBACb,YAAY,IAAI,OAAO,WAAW;gBAClC,YAAY,IAAI,OAAO,WAAW;YACpC;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,MAAM;gBACN,SAAS;gBACT,QAAQ;YACV;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,QAAQ,CAAC,EAAE;YACjB,SAAS;YACT,QAAQ;QACV;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAE1D,uCAAuC;QACvC,MAAM,kBAAkB;YACtB,IAAI;YACJ,MAAM;YACN,WAAW;YACX,eAAe;YACf,iBAAiB;YACjB,aAAa;YACb,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,IAAI,OAAO,WAAW;QACpC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,SAAS;YACT,QAAQ;YACR,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,OAAO;IACT,GAAG;QAAE,QAAQ;IAAI;AACnB","debugId":null}}]
}