{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/lib/supabase.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\n\n// Server-side Supabase client for API routes\nexport const createServerSupabaseClient = () => {\n  const url = process.env.NEXT_PUBLIC_SUPABASE_URL\n  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n  \n  if (!url || !key) {\n    throw new Error('Supabase environment variables not configured')\n  }\n  \n  return createServerClient(\n    url,\n    key,\n  {\n    cookies: {\n        get() {\n          return null\n      },\n        set() {\n          // No-op for API routes\n      },\n        remove() {\n          // No-op for API routes\n      },\n    },\n  }\n)\n}\n\n// Types for the website (focusing on public-facing data)\nexport type Contact = {\n  id: string\n  first_name: string | null\n  last_name: string | null\n  phone: string | null\n  email: string | null\n  profile_image: string | null\n  lifecycle: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Event = {\n  id: string\n  name: string\n  description: string | null\n  location: string | null\n  capacity: number | null\n  event_date: string\n  is_recurring: boolean\n  created_at: string\n  updated_at: string\n}\n\nexport type EventImage = {\n  id: string\n  event_id: string\n  url: string\n  alt_text: string | null\n  sort_order: number\n  created_at: string\n}\n\nexport type EventRegistration = {\n  id: string\n  event_id: string\n  contact_id: string\n  status: string\n  created_at: string\n  updated_at: string\n}\n\nexport type Database = {\n  public: {\n    Tables: {\n      'contacts': {\n        Row: Contact\n        Insert: Omit<Contact, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Contact, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  },\n  events: {\n    Tables: {\n      'events': {\n        Row: Event\n        Insert: Omit<Event, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<Event, 'id' | 'created_at' | 'updated_at'>>\n      },\n      'event_images': {\n        Row: EventImage\n        Insert: Omit<EventImage, 'id' | 'created_at'>\n        Update: Partial<Omit<EventImage, 'id' | 'created_at'>>\n      },\n      'registrations': {\n        Row: EventRegistration\n        Insert: Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>\n        Update: Partial<Omit<EventRegistration, 'id' | 'created_at' | 'updated_at'>>\n      }\n    }\n  }\n} "],"names":[],"mappings":";;;AAAA;AAAA;;AAGO,MAAM,6BAA6B;IACxC,MAAM;IACN,MAAM;IAEN,uCAAkB;;IAElB;IAEA,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,EACtB,KACA,KACF;QACE,SAAS;YACL;gBACE,OAAO;YACX;YACE;YACE,uBAAuB;YAC3B;YACE;YACE,uBAAuB;YAC3B;QACF;IACF;AAEF","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/nanasasu/docm-web-standalone/src/app/api/navigation/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createServerSupabaseClient } from '@/lib/supabase'\n\n// Fallback navigation data in case database is not available\nconst defaultNavigation = [\n  { id: '1', label: 'Home', href: '/', order: 0, is_active: true },\n  { id: '2', label: 'About', href: '/about', order: 1, is_active: true },\n  { id: '3', label: 'Events', href: '/events', order: 2, is_active: true },\n  { \n    id: '4', \n    label: 'Media', \n    href: '#', \n    order: 3, \n    is_active: true,\n    children: [\n      { id: '4a', label: 'Sermons', href: '/media/sermons', order: 0, is_active: true, parent_id: '4' },\n      { id: '4b', label: 'Gallery', href: '/media/gallery', order: 1, is_active: true, parent_id: '4' },\n      { id: '4c', label: 'Blog', href: '/media/blog', order: 2, is_active: true, parent_id: '4' }\n    ]\n  },\n  { id: '5', label: 'Contact', href: '/contact', order: 4, is_active: true }\n]\n\nexport async function GET(request: NextRequest) {\n  try {\n    // Check if environment variables are configured\n    if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY) {\n      console.log('🔄 NAVIGATION SOURCE: DEFAULT (Supabase not configured)')\n      return NextResponse.json({ \n        navigation: defaultNavigation,\n        source: 'default',\n        message: 'Using default navigation - Supabase not configured'\n      })\n    }\n\n    let supabase\n    try {\n      supabase = createServerSupabaseClient()\n    } catch (error) {\n      console.log('🔄 NAVIGATION SOURCE: DEFAULT (Supabase client creation failed)')\n      return NextResponse.json({ \n        navigation: defaultNavigation,\n        source: 'default',\n        message: 'Using default navigation - Supabase client failed'\n      })\n    }\n\n    // Fetch navigation items from the database\n    console.log('🔍 Attempting to fetch navigation from database...')\n    const { data: navItems, error } = await supabase\n      .from('navigation')\n      .select('*')\n      .eq('is_active', true)\n      .order('order', { ascending: true })\n\n    console.log('📊 Database query result:', {\n      data: navItems,\n      error: error,\n      dataLength: navItems ? navItems.length : 0\n    })\n\n    if (error) {\n      console.error('🔄 NAVIGATION SOURCE: DEFAULT (Database error):', error.message)\n      console.error('🔍 Full error details:', error)\n      // If table doesn't exist or other DB error, fall back to default\n      if (error.code === 'PGRST116' || error.message?.includes('relation') || error.message?.includes('does not exist')) {\n        console.log('🔄 NAVIGATION SOURCE: DEFAULT (Navigation table does not exist)')\n        return NextResponse.json({ \n          navigation: defaultNavigation,\n          source: 'default',\n          message: 'Using default navigation - Database table does not exist'\n        })\n      }\n      return NextResponse.json({ \n        navigation: defaultNavigation,\n        source: 'default',\n        message: `Using default navigation - Database error: ${error.message}`\n      })\n    }\n\n    // If no navigation items found, use default\n    if (!navItems || navItems.length === 0) {\n      console.log('🔄 NAVIGATION SOURCE: DEFAULT (No items in database)')\n      return NextResponse.json({ \n        navigation: defaultNavigation,\n        source: 'default',\n        message: 'Using default navigation - No items found in database'\n      })\n    }\n\n    // Build navigation tree (parent-child relationships)\n    const navTree = buildNavigationTree(navItems)\n\n    console.log('🗄️ NAVIGATION SOURCE: DATABASE (Successfully loaded from Supabase)')\n    return NextResponse.json({ \n      navigation: navTree,\n      source: 'database',\n      message: 'Navigation loaded from database'\n    })\n  } catch (error) {\n    console.error('🔄 NAVIGATION SOURCE: DEFAULT (Unexpected error):', error)\n    // Always fall back to default navigation on any error\n    return NextResponse.json({ \n      navigation: defaultNavigation,\n      source: 'default',\n      message: 'Using default navigation - Unexpected error'\n    })\n  }\n}\n\nfunction buildNavigationTree(items: any[]) {\n  const itemMap = new Map()\n  const rootItems: any[] = []\n\n  // Initialize all items with children array\n  items.forEach(item => {\n    itemMap.set(item.id, { ...item, children: [] })\n  })\n\n  // Build tree structure\n  items.forEach(item => {\n    const itemWithChildren = itemMap.get(item.id)!\n    if (item.parent_id && itemMap.has(item.parent_id)) {\n      itemMap.get(item.parent_id)!.children.push(itemWithChildren)\n    } else {\n      rootItems.push(itemWithChildren)\n    }\n  })\n\n  // Sort by order\n  rootItems.sort((a, b) => a.order - b.order)\n  rootItems.forEach(item => {\n    item.children.sort((a: any, b: any) => a.order - b.order)\n  })\n\n  return rootItems\n} "],"names":[],"mappings":"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","debugId":null}}]
}